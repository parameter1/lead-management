name: Deploy suite (Staging)

on:
  push:
    branches: [ main ]

env:
  ECR_REGISTRY: 598984531759.dkr.ecr.us-east-2.amazonaws.com
  IMG_PREFIX: lead-management
  TARGET_NAMESPACE: lead-management

jobs:
  version:
    runs-on: ubuntu-latest
    steps:
    - id: tag_version
      run: |
        REF=$(echo $GITHUB_REF | cut -d / -f 3)
        [[ "$GITHUB_REF" =~ ^refs/tags.*$ ]] && VERSION="$REF" || VERSION="${REF}-${GITHUB_SHA::7}"
        echo "version=$VERSION" >> $GITHUB_OUTPUT
    outputs:
      version: ${{ steps.tag_version.outputs.version }}

  notify-start:
    needs: [version]
    uses: parameter1/actions/.github/workflows/notify-start.yml@main
    secrets: inherit
    with:
      version: ${{ needs.version.outputs.version }}

  post-deploy-failure:
    if: failure()
    needs:
      - notify-start
      - deploy-app
    uses: parameter1/actions/.github/workflows/notify-fail.yml@main
    secrets: inherit
    with:
      slack-thread: ${{ needs.notify-start.outputs.slack-thread }}

  post-deploy-complete:
    if: success()
    needs:
      - notify-start
      - deploy-app
    uses: parameter1/actions/.github/workflows/notify-complete.yml@main
    secrets: inherit
    with:
      slack-thread: ${{ needs.notify-start.outputs.slack-thread }}

  build-app:
    needs:
    - version
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          - { path: manage, name: manage }
    steps:
      - uses: actions/checkout@v4
      - uses: docker/login-action@v1
        name: Login to ECR
        with:
          registry: ${{ env.ECR_REGISTRY }}
          username: ${{ secrets.AWS_ACCESS_KEY_ID }}
          password: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: Build docker image
        uses: docker/build-push-action@v2
        with:
          context: manage
          push: true
          build-args: |
            VERSION=${{ needs.version.outputs.version }}
          tags: ${{ env.ECR_REGISTRY }}/${{ env.IMG_PREFIX }}-${{ matrix.service.name }}:${{ needs.version.outputs.version }}

  build-services:
    needs:
    - version
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          - { path: exports, name: exports }
          - { path: server, name: server }
    steps:
      - uses: actions/checkout@v4
      - uses: docker/login-action@v1
        name: Login to ECR
        with:
          registry: ${{ env.ECR_REGISTRY }}
          username: ${{ secrets.AWS_ACCESS_KEY_ID }}
          password: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      - name: Build docker image
        uses: docker/build-push-action@v2
        with:
          context: monorepo
          push: true
          build-args: |
            SERVICE_PATH=${{ matrix.service.path }}
          tags: ${{ env.ECR_REGISTRY }}/${{ env.IMG_PREFIX }}-${{ matrix.service.name }}:${{ needs.version.outputs.version }}

  deploy-lambdas:
    needs:
      - version
      - build-app
      - build-services
    runs-on: ubuntu-latest
    strategy:
      matrix:
        function:
          - lead-management-indm-enqueue-deployment-data
          - lead-management-indm-process-deployment-data
          - lead-management-indm-poll-deployments
          - lead-management-indm-process-brand-data
          - lead-management-indm-process-customers
          - lead-management-indm-process-identity-records
          - lead-management-indm-upsert-scaffolded-customers
    steps:
      - uses: actions/checkout@v4
      - run: cd monorepo && ./scripts/build-lambdas.js

      - uses: appleboy/lambda-action@v0.2.0
        with:
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws_region: us-east-2
          function_name: ${{ matrix.function }}
          zip_file: dist/lambda.zip
          debug: true

  deploy-app:
    needs:
    - version
    - deploy-services
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          - { path: manage, name: manage }
    steps:
      - name: Deploy to Kubernetes
        run: |
          npx @parameter1/rancher2cli dl \
            --wait --namespace ${{ env.TARGET_NAMESPACE }} \
            lead-management-service ${{ matrix.service.name }} \
            ${{ env.ECR_REGISTRY }}/${{ env.IMG_PREFIX }}-${{ matrix.service.name }}:${{ needs.version.outputs.version }}
        env:
          RANCHER_CLUSTERID: ${{ secrets.RANCHER_CLUSTERID_MINDFUL }}
          RANCHER_TOKEN: ${{ secrets.RANCHER_TOKEN }}
          RANCHER_URL: ${{ secrets.RANCHER_URL }}

  deploy-services:
    needs:
    - version
    - deploy-lambdas
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service:
          - { path: exports, name: exports }
          - { path: server, name: server }
    steps:
      - name: Deploy to Kubernetes
        run: |
          npx @parameter1/rancher2cli dl \
            --wait --namespace ${{ env.TARGET_NAMESPACE }} \
            lead-automation-service ${{ matrix.service.name }} \
            ${{ env.ECR_REGISTRY }}/${{ env.IMG_PREFIX }}-${{ matrix.service.name }}:${{ needs.version.outputs.version }}
        env:
          RANCHER_CLUSTERID: ${{ secrets.RANCHER_CLUSTERID_MINDFUL }}
          RANCHER_TOKEN: ${{ secrets.RANCHER_TOKEN }}
          RANCHER_URL: ${{ secrets.RANCHER_URL }}
